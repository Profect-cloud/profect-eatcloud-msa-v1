name: ECR + ECS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
  ECS_CLUSTER_STAGING: eatcloud-cluster
  ECS_CLUSTER_PRODUCTION: eatcloud-cluster

jobs:
  # Î≥ÄÍ≤ΩÎêú ÏÑúÎπÑÏä§ Í∞êÏßÄ
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
      matrix: ${{ steps.changes.outputs.matrix }}
      has_changes: ${{ steps.changes.outputs.has_changes }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changed services
      id: changes
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # PRÏùò Í≤ΩÏö∞ base Î∏åÎûúÏπòÏôÄ ÎπÑÍµê
          changed_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
        else
          # PushÏùò Í≤ΩÏö∞ Ïù¥Ï†Ñ Ïª§Î∞ãÍ≥º ÎπÑÍµê
          changed_files=$(git diff --name-only HEAD~1 HEAD)
        fi
        
        echo "Changed files:"
        echo "$changed_files"
        
        services=()
        
        # Í∞Å ÏÑúÎπÑÏä§Î≥ÑÎ°ú Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÌôïÏù∏
        for service in api-gateway eureka-server auth-service customer-service admin-service manager-service store-service order-service payment-service; do
          if echo "$changed_files" | grep -q "^$service/"; then
            services+=("$service")
          fi
        done
        
        # Î£®Ìä∏ Î†àÎ≤® Î≥ÄÍ≤ΩÏÇ¨Ìï≠ (Î™®Îì† ÏÑúÎπÑÏä§Ïóê ÏòÅÌñ•)
        if echo "$changed_files" | grep -qE "^(build\.gradle|settings\.gradle|docker-compose\.yml|gradle/|\.github/workflows/)"; then
          services=(api-gateway eureka-server auth-service customer-service admin-service manager-service store-service order-service payment-service)
        fi
        
        # ÏµúÏ¥à Ïª§Î∞ãÏù¥ÎÇò ÏÑúÎπÑÏä§Í∞Ä ÏóÜÎäî Í≤ΩÏö∞ Î™®Îì† ÏÑúÎπÑÏä§ ÎπåÎìú
        if [ ${#services[@]} -eq 0 ]; then
          services=(api-gateway eureka-server auth-service customer-service admin-service manager-service store-service order-service payment-service)
        fi
        
        # JSON Î∞∞Ïó¥Î°ú Î≥ÄÌôò
        services_json=$(printf '%s\n' "${services[@]}" | jq -R -s -c 'split("\n")[:-1]')
        echo "services=$services_json" >> $GITHUB_OUTPUT
        
        # Matrix Ï†ÑÎûµÏùÑ ÏúÑÌïú ÌòïÌÉúÎ°ú Î≥ÄÌôò
        matrix_json=$(printf '%s\n' "${services[@]}" | jq -R -s -c '{"service": split("\n")[:-1]}')
        echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
        
        # Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ïó¨Î∂Ä
        if [ ${#services[@]} -gt 0 ]; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
        fi
        
        echo "Detected services: $services_json"

  # ÌÖåÏä§Ìä∏ Î∞è ÎπåÎìú
  test-and-build:
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.detect-changes.outputs.matrix)}}
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Test ${{ matrix.service }}
      run: ./gradlew :${{ matrix.service }}:test
      continue-on-error: true

    - name: Build ${{ matrix.service }}
      run: ./gradlew :${{ matrix.service }}:bootJar

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.service }}-${{ github.sha }}
        path: ${{ matrix.service }}/build/reports/tests/
        retention-days: 7

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jar-${{ matrix.service }}-${{ github.sha }}
        path: ${{ matrix.service }}/build/libs/*.jar
        retention-days: 30

  # ECRÏóê Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú
  build-and-push-ecr:
    needs: [detect-changes, test-and-build]
    if: needs.detect-changes.outputs.has_changes == 'true' && github.event_name == 'push'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.detect-changes.outputs.matrix)}}
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: jar-${{ matrix.service }}-${{ github.sha }}
        path: ${{ matrix.service }}/build/libs/

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if not exists
      run: |
        aws ecr describe-repositories --repository-names eatcloud/${{ matrix.service }} || \
        aws ecr create-repository \
          --repository-name eatcloud/${{ matrix.service }} \
          --image-scanning-configuration scanOnPush=true \
          --encryption-configuration encryptionType=AES256

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.service }}/Dockerfile
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/eatcloud/${{ matrix.service }}:latest
          ${{ env.ECR_REGISTRY }}/eatcloud/${{ matrix.service }}:${{ github.sha }}
          ${{ env.ECR_REGISTRY }}/eatcloud/${{ matrix.service }}:$(echo ${{ github.sha }} | cut -c1-8)
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Scan image for vulnerabilities
      run: |
        aws ecr start-image-scan --repository-name eatcloud/${{ matrix.service }} --image-id imageTag=latest || true

  # Staging ÏûêÎèô Î∞∞Ìè¨ (develop Î∏åÎûúÏπò)
  deploy-staging:
    needs: [detect-changes, build-and-push-ecr]
    if: needs.detect-changes.outputs.has_changes == 'true' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    strategy:
      matrix: ${{fromJson(needs.detect-changes.outputs.matrix)}}
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to ECS Staging
      run: |
        # ECS ÏÑúÎπÑÏä§ Í∞ïÏ†ú ÏÉà Î∞∞Ìè¨
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER_STAGING }} \
          --service ${{ matrix.service }} \
          --force-new-deployment \
          --query 'service.{ServiceName:serviceName,Status:status,TaskDefinition:taskDefinition}'

    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER_STAGING }} \
          --services ${{ matrix.service }}
        
        echo "‚úÖ ${{ matrix.service }} staging deployment completed"

  # Production ÏàòÎèô Î∞∞Ìè¨ Ï§ÄÎπÑ ÏïåÎ¶º
  production-deploy-ready:
    needs: [detect-changes, build-and-push-ecr]
    if: needs.detect-changes.outputs.has_changes == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Production deployment notification
      run: |
        echo "üöÄ Production deployment ready!"
        echo "Services: ${{ needs.detect-changes.outputs.services }}"
        echo "Image SHA: ${{ github.sha }}"
        echo "ECR Images:"
        echo "${{ needs.detect-changes.outputs.services }}" | jq -r '.[]' | while read service; do
          echo "  - ${{ env.ECR_REGISTRY }}/eatcloud/${service}:${{ github.sha }}"
        done
        echo ""
        echo "To deploy to production:"
        echo "1. Go to Actions tab"
        echo "2. Run 'Deploy to Production (ECR + ECS)' workflow"
        echo "3. Select services and image tag: ${{ github.sha }}"

 
            ]
          }" \
          ${{ secrets.SLACK_WEBHOOK_URL }}
