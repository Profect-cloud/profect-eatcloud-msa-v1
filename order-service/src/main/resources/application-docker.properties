server.port=8086
spring.application.name=order-service

eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
eureka.instance.prefer-ip-address=false
eureka.instance.hostname=order-service

spring.datasource.url=jdbc:postgresql://${DB_HOST}:5432/${DB_NAME}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}

# JPA/Hibernate ?? - ???? ??? ??
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# SQL ??? ???? (Hibernate? ???? ??)
spring.sql.init.mode=never

# Redis Configuration
spring.data.redis.host=${REDIS_HOST:redis}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.timeout=${REDIS_TIMEOUT:2000}ms
spring.data.redis.database=${REDIS_DATABASE:0}
# Lettuce Connection Pool (Spring Boot 3.x default)
spring.data.redis.lettuce.pool.enabled=true
spring.data.redis.lettuce.pool.max-active=${REDIS_POOL_MAX_ACTIVE:8}
spring.data.redis.lettuce.pool.max-idle=${REDIS_POOL_MAX_IDLE:8}
spring.data.redis.lettuce.pool.min-idle=${REDIS_POOL_MIN_IDLE:0}
spring.data.redis.lettuce.pool.max-wait=-1ms
spring.data.redis.lettuce.shutdown-timeout=100ms

# Kafka (Docker)
spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka:9092}

# Distributed Lock Configuration
distributed.lock.timeout=${DISTRIBUTED_LOCK_TIMEOUT:5}
distributed.lock.retry.count=${DISTRIBUTED_LOCK_RETRY_COUNT:3}
distributed.lock.retry.delay=${DISTRIBUTED_LOCK_RETRY_DELAY:100}

management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always

logging.level.com.eatcloud.orderservice=DEBUG
logging.level.org.springframework.cloud.netflix.eureka=DEBUG
logging.level.org.springframework.orm.jpa=DEBUG
logging.level.org.hibernate.SQL=DEBUG

# OAuth2 Resource Server (JWT via auth-service)
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://auth-service:8081/api/v1/auth/.well-known/jwks.json
